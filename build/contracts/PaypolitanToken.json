{
  "contractName": "PaypolitanToken",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "grantHolder",
          "type": "address"
        }
      ],
      "name": "getInstrinsicVestingSchedule",
      "outputs": [
        {
          "name": "cliffDuration",
          "type": "uint32"
        },
        {
          "name": "vestDuration",
          "type": "uint32"
        },
        {
          "name": "vestIntervalDays",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isGrantor",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "grantHolder",
          "type": "address"
        },
        {
          "name": "onDay",
          "type": "uint32"
        }
      ],
      "name": "revokeGrant",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "onDayOrToday",
          "type": "uint32"
        }
      ],
      "name": "vestingAsOf",
      "outputs": [
        {
          "name": "amountVested",
          "type": "uint256"
        },
        {
          "name": "amountNotVested",
          "type": "uint256"
        },
        {
          "name": "amountOfGrant",
          "type": "uint256"
        },
        {
          "name": "vestStartDay",
          "type": "uint32"
        },
        {
          "name": "vestDuration",
          "type": "uint32"
        },
        {
          "name": "cliffDuration",
          "type": "uint32"
        },
        {
          "name": "vestIntervalDays",
          "type": "uint32"
        },
        {
          "name": "isActive",
          "type": "bool"
        },
        {
          "name": "wasRevoked",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "whereAmI",
      "outputs": [
        {
          "name": "yourAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeGrantor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "name": "vestingAmount",
          "type": "uint256"
        },
        {
          "name": "startDay",
          "type": "uint32"
        }
      ],
      "name": "safeGrantUniformVestingTokens",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "name": "vestingAmount",
          "type": "uint256"
        },
        {
          "name": "startDay",
          "type": "uint32"
        },
        {
          "name": "duration",
          "type": "uint32"
        },
        {
          "name": "cliffDuration",
          "type": "uint32"
        },
        {
          "name": "interval",
          "type": "uint32"
        },
        {
          "name": "isRevocable",
          "type": "bool"
        }
      ],
      "name": "safeGrantVestingTokens",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "safeTransfer",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        },
        {
          "name": "isUniformGrantor",
          "type": "bool"
        }
      ],
      "name": "addGrantor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "grantor",
          "type": "address"
        },
        {
          "name": "duration",
          "type": "uint32"
        },
        {
          "name": "cliffDuration",
          "type": "uint32"
        },
        {
          "name": "interval",
          "type": "uint32"
        },
        {
          "name": "isRevocable",
          "type": "bool"
        }
      ],
      "name": "setGrantorVestingSchedule",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isUniformGrantor",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        },
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "name": "vestingAmount",
          "type": "uint256"
        },
        {
          "name": "startDay",
          "type": "uint32"
        },
        {
          "name": "duration",
          "type": "uint32"
        },
        {
          "name": "cliffDuration",
          "type": "uint32"
        },
        {
          "name": "interval",
          "type": "uint32"
        },
        {
          "name": "isRevocable",
          "type": "bool"
        }
      ],
      "name": "grantVestingTokens",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "shortName",
          "type": "string"
        }
      ],
      "name": "iAm",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "grantor",
          "type": "address"
        },
        {
          "name": "minStartDay",
          "type": "uint32"
        },
        {
          "name": "maxStartDay",
          "type": "uint32"
        },
        {
          "name": "expirationDay",
          "type": "uint32"
        }
      ],
      "name": "setRestrictions",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "grantHolder",
          "type": "address"
        }
      ],
      "name": "getIntrinsicVestingSchedule",
      "outputs": [
        {
          "name": "vestDuration",
          "type": "uint32"
        },
        {
          "name": "cliffDuration",
          "type": "uint32"
        },
        {
          "name": "vestIntervalDays",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "today",
      "outputs": [
        {
          "name": "dayNumber",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "grantHolder",
          "type": "address"
        },
        {
          "name": "onDayOrToday",
          "type": "uint32"
        }
      ],
      "name": "vestingForAccountAsOf",
      "outputs": [
        {
          "name": "amountVested",
          "type": "uint256"
        },
        {
          "name": "amountNotVested",
          "type": "uint256"
        },
        {
          "name": "amountOfGrant",
          "type": "uint256"
        },
        {
          "name": "vestStartDay",
          "type": "uint32"
        },
        {
          "name": "vestDuration",
          "type": "uint32"
        },
        {
          "name": "cliffDuration",
          "type": "uint32"
        },
        {
          "name": "vestIntervalDays",
          "type": "uint32"
        },
        {
          "name": "isActive",
          "type": "bool"
        },
        {
          "name": "wasRevoked",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "registerAccount",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "whoAmI",
      "outputs": [
        {
          "name": "yourName",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "safeApprove",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "name": "vestingAmount",
          "type": "uint256"
        },
        {
          "name": "startDay",
          "type": "uint32"
        }
      ],
      "name": "grantUniformVestingTokens",
      "outputs": [
        {
          "name": "ok",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "name": "",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "DepositReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "grantor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "minStartDay",
          "type": "uint32"
        },
        {
          "indexed": false,
          "name": "maxStartDay",
          "type": "uint32"
        },
        {
          "indexed": false,
          "name": "expirationDay",
          "type": "uint32"
        }
      ],
      "name": "GrantorRestrictionsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vestingLocation",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "cliffDuration",
          "type": "uint32"
        },
        {
          "indexed": true,
          "name": "duration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "name": "interval",
          "type": "uint32"
        },
        {
          "indexed": true,
          "name": "isRevokable",
          "type": "bool"
        }
      ],
      "name": "VestingScheduleCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "vestingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "startDay",
          "type": "uint32"
        },
        {
          "indexed": false,
          "name": "vestingLocation",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "grantor",
          "type": "address"
        }
      ],
      "name": "VestingTokensGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "grantHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "onDay",
          "type": "uint32"
        }
      ],
      "name": "GrantRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GrantorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GrantorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "kill",
      "outputs": [
        {
          "name": "itsDeadJim",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"grantHolder\",\"type\":\"address\"}],\"name\":\"getInstrinsicVestingSchedule\",\"outputs\":[{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"vestDuration\",\"type\":\"uint32\"},{\"name\":\"vestIntervalDays\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isGrantor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"grantHolder\",\"type\":\"address\"},{\"name\":\"onDay\",\"type\":\"uint32\"}],\"name\":\"revokeGrant\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"onDayOrToday\",\"type\":\"uint32\"}],\"name\":\"vestingAsOf\",\"outputs\":[{\"name\":\"amountVested\",\"type\":\"uint256\"},{\"name\":\"amountNotVested\",\"type\":\"uint256\"},{\"name\":\"amountOfGrant\",\"type\":\"uint256\"},{\"name\":\"vestStartDay\",\"type\":\"uint32\"},{\"name\":\"vestDuration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"vestIntervalDays\",\"type\":\"uint32\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"wasRevoked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whereAmI\",\"outputs\":[{\"name\":\"yourAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeGrantor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"name\":\"startDay\",\"type\":\"uint32\"}],\"name\":\"safeGrantUniformVestingTokens\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[{\"name\":\"itsDeadJim\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"name\":\"startDay\",\"type\":\"uint32\"},{\"name\":\"duration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"interval\",\"type\":\"uint32\"},{\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"safeGrantVestingTokens\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"isUniformGrantor\",\"type\":\"bool\"}],\"name\":\"addGrantor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"grantor\",\"type\":\"address\"},{\"name\":\"duration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"interval\",\"type\":\"uint32\"},{\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"setGrantorVestingSchedule\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUniformGrantor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"name\":\"startDay\",\"type\":\"uint32\"},{\"name\":\"duration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"interval\",\"type\":\"uint32\"},{\"name\":\"isRevocable\",\"type\":\"bool\"}],\"name\":\"grantVestingTokens\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"shortName\",\"type\":\"string\"}],\"name\":\"iAm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"grantor\",\"type\":\"address\"},{\"name\":\"minStartDay\",\"type\":\"uint32\"},{\"name\":\"maxStartDay\",\"type\":\"uint32\"},{\"name\":\"expirationDay\",\"type\":\"uint32\"}],\"name\":\"setRestrictions\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"grantHolder\",\"type\":\"address\"}],\"name\":\"getIntrinsicVestingSchedule\",\"outputs\":[{\"name\":\"vestDuration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"vestIntervalDays\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"today\",\"outputs\":[{\"name\":\"dayNumber\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"grantHolder\",\"type\":\"address\"},{\"name\":\"onDayOrToday\",\"type\":\"uint32\"}],\"name\":\"vestingForAccountAsOf\",\"outputs\":[{\"name\":\"amountVested\",\"type\":\"uint256\"},{\"name\":\"amountNotVested\",\"type\":\"uint256\"},{\"name\":\"amountOfGrant\",\"type\":\"uint256\"},{\"name\":\"vestStartDay\",\"type\":\"uint32\"},{\"name\":\"vestDuration\",\"type\":\"uint32\"},{\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"name\":\"vestIntervalDays\",\"type\":\"uint32\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"wasRevoked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerAccount\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whoAmI\",\"outputs\":[{\"name\":\"yourName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"name\":\"startDay\",\"type\":\"uint32\"}],\"name\":\"grantUniformVestingTokens\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"grantor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"minStartDay\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"maxStartDay\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"expirationDay\",\"type\":\"uint32\"}],\"name\":\"GrantorRestrictionsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vestingLocation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"interval\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"isRevokable\",\"type\":\"bool\"}],\"name\":\"VestingScheduleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startDay\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"vestingLocation\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"grantor\",\"type\":\"address\"}],\"name\":\"VestingTokensGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"grantHolder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"onDay\",\"type\":\"uint32\"}],\"name\":\"GrantRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GrantorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GrantorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"An ETC20 implementation of the Paypolitan Token. All tokens are initially pre-assigned to the creator, and can later be distributed freely using transfer transferFrom other ERC20 functions\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See `IERC20.allowance`.\"},\"approve(address,uint256)\":{\"details\":\"additional available funds check to prevent spending but not-vested tokens\"},\"balanceOf(address)\":{\"details\":\"See `IERC20.balanceOf`.\"},\"burn(uint256)\":{\"details\":\"Allow only owner to burn tokens from the owner's wallet, also decreasing the total supply. There is no reason for a token holder to EVER call this method directly. It will be used by future Paypolitan contract to implement the PaypolitanToken side of token redemption.\"},\"burnFrom(address,uint256)\":{\"details\":\"See `ERC20._burnFrom`.\"},\"constructor\":{\"details\":\"Constructor that gives msg.sender all of existing tokens\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.     * > Note that this information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including `IERC20.balanceOf` and `IERC20.transfer`.\"},\"getIntrinsicVestingSchedule(address)\":{\"details\":\"returns all the information about the vesting schedule directly associated with the given account. This can be used to double check that a uniform grantor has been set up with a correct vesting schedule. Also, recipients of standard (non-uniform) grants can use this. This method is only callable by the account holder or a grantor, so this is mainly intended for administrative use. Holders of uniform grants must use vestingAsOf() to view their vesting schedule, as it is stored in the grantor account\",\"params\":{\"grantHolder\":\"= The address to do this for. the special value 0 to indicate today\"},\"return\":\"= Atuple with the following values: vestDuration = grant duration in days cliffDuration = duration of the cliff vestIntervalDays = number of days between vesting periods\"},\"grantUniformVestingTokens(address,uint256,uint256,uint32)\":{\"details\":\"Immediately grants tokens to an address, including a portion that will vest over time according to the uniform vesting schedule already established ni the grantor's account\",\"params\":{\"beneficiary\":\"= Address to which tokens will be granted\",\"startDay\":\"= start day of the grant's vesting schedule, in days since the UNIX epoch (start of day). The startDay may be given as a date in the future or in the past, going as far back as year 2000\",\"totalAmount\":\"= total number of tokens to deposit into the account\",\"vestingAmount\":\"= out of totalAmount, the number of tokens subject to vesting\"}},\"grantVestingTokens(address,uint256,uint256,uint32,uint32,uint32,uint32,bool)\":{\"details\":\"Immediately grants tokens to an address, including a portion that will vest over time according to a set vesting schedule. The overall duration and cliff duration of the grant must be an even multiple of the vesting interval.\",\"params\":{\"beneficiary\":\"= Address to which tokens will be granted.\",\"cliffDuration\":\"= Duration of the cliff, with respect to the grant start day, in days.\",\"duration\":\"= Duration of the vesting schedule, with respect to the grant start day, in days.\",\"interval\":\"= Number of days between vesting increases.\",\"isRevocable\":\"= True if the grant can be revoked (i.e. was a gift) or false if it cannot  be revoked (i.e. tokens were purchased).\",\"startDay\":\"= Start day of the grant's vesting schedule, in days since the UNIX epoch  (start of day). The startDay may be given as a date in the future or in the past, going as far  back as year 2000.\",\"totalAmount\":\"= Total number of tokens to deposit into the account.\",\"vestingAmount\":\"= Out of totalAmount, the number of tokens subject to vesting.\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"kill()\":{\"details\":\"Allow pauser to kill the contract (which must already be paused), with enough restrictions in place to ensure this could not happen by accident very easily. ETH is returned to owner wallet.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Called by a pauser to pause, triggers stopped state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"revokeGrant(address,uint32)\":{\"details\":\"if an account has a revocable grant, this forces the grant to end based on computing the amount vested up to the given date. All tokens that would no longer vest are returned to the account of the original grantor\",\"params\":{\"grantHolder\":\"- address to which tokens will be granted\",\"onDay\":\"- the day upon which the vesting schedule will be effectively terminated\"}},\"safeGrantUniformVestingTokens(address,uint256,uint256,uint32)\":{\"details\":\"This variant only grants tokens if the beneficiary account has previously self-registered\"},\"safeGrantVestingTokens(address,uint256,uint256,uint32,uint32,uint32,uint32,bool)\":{\"details\":\"this variant only grants tokens if the beneficiary account has previously self-registered\"},\"setGrantorVestingSchedule(address,uint32,uint32,uint32,bool)\":{\"details\":\"Lets owner permanently establish a vesting schedule for a restricted grantor to use when creating uniform token grants. Grantee accounts forever refer to the grantor's account to look up vesting, so this method can only be used once per grantor.\",\"params\":{\"cliffDuration\":\"= Duration of the cliff, with respect to the grant start day, in days.\",\"duration\":\"= Duration of the vesting schedule, with respect to the grant start day, in days.\",\"grantor\":\"= Address which will receive the uniform grantable vesting schedule.\",\"interval\":\"= Number of days between vesting increases.\",\"isRevocable\":\"= True if the grant can be revoked (i.e. was a gift) or false if it cannot  be revoked (i.e. tokens were purchased).\"}},\"setRestrictions(address,uint32,uint32,uint32)\":{\"details\":\"lets the ownser set or change specific restrictions. Restrictions must be established before the grantor will be allowed to issue grants. All the values are expressed as number of days since UNIX epoch. Nothe that the inputs are themselevs not very thoroughly restricted. However, this method can be called more than once if incorrect values need to be changed, or to extend a grantor's expiration date\",\"params\":{\"expirationDay\":\"- the last day this grantor may make grants\",\"grantor\":\"- Address which will receive the uniform grantable vesting schedule\",\"maxStartDay\":\"- the maximum value for startDay allowed in grant creation\",\"minStartDay\":\"- the smallest value for startDay allowed in grant creation\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"today()\":{\"details\":\"returns the day number of the current day, in days since the UNIX epoch\"},\"totalSupply()\":{\"details\":\"See `IERC20.totalSupply`.\"},\"transfer(address,uint256)\":{\"details\":\"methods transfer() and approve() require an additional available funds check to prevent spending held but not-vested tokens. Note that transferFrom() does not have this additional check because approved funds come from an already set-aside allowance, not from the wallet.\"},\"unpause()\":{\"details\":\"Called by a pauser to unpause, returns to normal state.\"},\"vestingAsOf(uint32)\":{\"details\":\"return all the information about the grant's vesting as of the given day for the current account to be called by the account holder\",\"params\":{\"onDayOrToday\":\"- the day to check for. Can pass the special value 0 to indicate today\"},\"return\":\"- A touple with the following values amountVested - the amount of the vestingAmount that is vested amountNotVested - the amount that is vested (equal to vestingAmount - vestedAmount) amountOfGrant - the amount of tokens subject to vesting vestStartDay - starting day of the grant cliffDuration - duration of the cliff vestDuration - grant duration in days vestIntervalDays - number of days between vesting periods isActive - true if the vesting schedule is currently active wasRevoked - true id the vesting schedule was revoked\"}}},\"userdoc\":{\"methods\":{\"iAm(string)\":{\"notice\":\"Associate short name with the account\"},\"registerAccount()\":{\"notice\":\"this registers the calling wallet address as a known address. Operations that transfer responsibility may require the target account to be a registered account to protect the system from getting into a state where administration or a large amount of funds can become forever innaccesible\"},\"renounceOwnership()\":{\"notice\":\"overridden ERC20 functionality ensure there is no way for the contract to end up with no owner\"},\"safeTransfer(address,uint256)\":{\"notice\":\"Safe ERC20 methods\"},\"transferOwnership(address)\":{\"notice\":\"allows the current owner to transfer control of the contract to a newOwner\"},\"whereAmI()\":{\"notice\":\"Function to confirm the address of the current account\"},\"whoAmI()\":{\"notice\":\"Confirm the shortName of the current account\"}}}},\"settings\":{\"compilationTarget\":{\"/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/PaypolitanToken.sol\":\"PaypolitanToken\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/ERC20Vestable.sol\":{\"keccak256\":\"0x262de2940c140236ae6d1edb2701e145b77ec155cec380323da61eaf3e31da73\",\"urls\":[\"bzzr://b697e4c2ae4017fa087a75984398d979670950c7fc88ac0a0281d66b4fd08c95\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/GrantorRole.sol\":{\"keccak256\":\"0x96c73553d49db3bd5d18292c13dbbe00f51f28d3a90302f9345cd791bfbd51f4\",\"urls\":[\"bzzr://667fba4d4d297b6a96e456493c62214aac2bbb2f8d5f9cb679f37c59b42eef68\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/IERC20Vestable.sol\":{\"keccak256\":\"0x8fded3f3bc3fed49475e521c98b072ca2bfa7d683b4e3cf4bbccde10aa59cdfd\",\"urls\":[\"bzzr://5d15bd6a670bc566b5813ca2a72d87710cd15d66c8820e9047a6a18250ad49eb\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/Identity.sol\":{\"keccak256\":\"0xc3caec3ee52f7daee8438d1bafeff968fc655f3a30983f50e60e0050b0edb0cc\",\"urls\":[\"bzzr://46a85a65823ea84e4881b1559ced296f5323d690690bf9f104e6c0d4913db831\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/PaypolitanToken.sol\":{\"keccak256\":\"0x43cf13babde37fc146bcf4e547bf8fc0d6928c33fced34fda3f55f38195d8bd3\",\"urls\":[\"bzzr://fe81eab65762ccc1b6b9e08857649d6ec6b71359485fbd8a25df7127dec63308\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/UniformTokenGrantor.sol\":{\"keccak256\":\"0xc3372ae79a0f4303c8d80062dfa48bf846d58c0804a5387d97d1be325b897ccd\",\"urls\":[\"bzzr://0a257028306595990762be6de5ddf77190d70012c2eaa3e2539adfd9710e735a\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/VerifiedAccount.sol\":{\"keccak256\":\"0x69979954210214e605d63ef19d387605f286ee9dee920912a4fdcc2bc0323aa2\",\"urls\":[\"bzzr://b366be2972fe2edb694c3648cca60fe43736f41614b8e66dc5eae3b0eb7a7d13\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/access/Roles.sol\":{\"keccak256\":\"0xb002c378d7b82a101bd659c341518953ca0919d342c0a400196982c0e7e7bcdb\",\"urls\":[\"bzzr://bd34c1ce05b5b2b3a62fc02e160f6805b1cadd476854664f433c685b2fda8dad\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\":{\"keccak256\":\"0xf6826c684d51ca28db5293ce11a54c5cca1c757b6cd32b87613833c65086f995\",\"urls\":[\"bzzr://01b2756ab5b41b1d7ccadfeac53fbdce9c889263f1e011329c300c5fa3fda65f\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\":{\"keccak256\":\"0x609f8cb524cd6b502624c79c099ec2fc6f23eef57b5c38e28efd82490875f37e\",\"urls\":[\"bzzr://46ee461a64298ef418bd100df1301355f4dc9ffeb06fe7a39aaf98d45c0bf988\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x4ccf2d7b51873db1ccfd54ca2adae5eac3b184f9699911ed4490438419f1c690\",\"urls\":[\"bzzr://1604f5b6d6e916c154efd8c6720cda069e5ba32dfa0a9dedf2b42e5b02d07f89\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0xf79fb10e8235770eb4aea7249034076a3cc9f9119ad944fc48705bae9c9d20dc\",\"urls\":[\"bzzr://d12a11272051eb6586de8f7e0a82c04a98c9984ce8b2a6cf1ee439f65aba29a9\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x852793a3c2f86d336a683b30d688ec3dcfc57451af5a2bf5975cda3b7191a901\",\"urls\":[\"bzzr://07fb42206812a17c1f71e548cfa5cec6f9aa1ae0ca5df870718ca4aa9759d1a5\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\":{\"keccak256\":\"0xa5ebf3344a36eb60e723e0764d85251c496e15e4b2d737b56415502b559a1765\",\"urls\":[\"bzzr://68812cb0a1d373d12c6986f5a9314c9bae7891a07a0e301d2317fcf409102f54\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\":{\"keccak256\":\"0xc61b3603089b09a730d8ca72e9133a496cc4405da40e9b87c12f073245d774bf\",\"urls\":[\"bzzr://f280f38d5ab6e1b89fd898ccd3901054a56572c141d91d30302e2db1db4cc6ff\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\":{\"keccak256\":\"0xc4973487824e5855e78e27d685b387566df52ea4b0854ba60b8703b533de47d4\",\"urls\":[\"bzzr://299d2f2c37a1b0cc8b15927fc516cc7f8a8f48e246512b3b3880bd3e4f0220d4\"]},\"/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x90e8c2521653bbb1768b05889c5760031e688d9cd361f167489b89215e201b95\",\"urls\":[\"bzzr://aa8b45b57edafc3d67bc5d916327ea16807fae33f753ca163ae0c4061b789766\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./Identity.sol\";\nimport \"../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"./UniformTokenGrantor.sol\";\n\n/**\n    @dev An ETC20 implementation of the Paypolitan Token. All tokens are initially pre-assigned to\n    the creator, and can later be distributed freely using transfer transferFrom other ERC20 functions\n */\ncontract PaypolitanToken is\n    Identity,\n    ERC20,\n    ERC20Pausable,\n    ERC20Burnable,\n    ERC20Detailed,\n    UniformTokenGrantor\n{\n    uint32 public constant VERSION = 1;\n    uint8 private constant DECIMALS = 18;\n    uint256 private constant TOKEN_WEI = 10**uint256(DECIMALS);\n\n    uint256 private constant INITIAL_WHOLE_TOKENS = uint256(5 * (10**9));\n    uint256 private constant INITIAL_SUPPLY = uint256(INITIAL_WHOLE_TOKENS) * uint256(TOKEN_WEI);\n\n    /**\n        @dev Constructor that gives msg.sender all of existing tokens\n     */\n    constructor() public ERC20Detailed(\"Paypolitan.io PPA token\", \"PPA\", DECIMALS) {\n        // this is the only place where we ever mint tokens\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    event DepositReceived(address indexed from, uint256 value);\n\n    /**\n        fallback function: collect any ether sent to us (whether we asked for it or not)\n     */\n    function() external payable {\n        // track where unexpected ETH came from so we can follow up later\n        emit DepositReceived(msg.sender, msg.value);\n    }\n\n    /**\n        @dev Allow only owner to burn tokens from the owner's wallet, also decreasing the total supply.\n        There is no reason for a token holder to EVER call this method directly. It will be\n        used by future Paypolitan contract to implement the PaypolitanToken side of token redemption.\n     */\n    function burn(uint256 value) public onlyIfFundsAvailableNow(msg.sender, value) {\n        // this is the only place where we ever burn tokens\n        _burn(msg.sender, value);\n    }\n\n    /**\n        @dev Allow pauser to kill the contract (which must already be paused), with enough restrictions\n        in place to ensure this could not happen by accident very easily.\n        ETH is returned to owner wallet.\n     */\n    function kill() public whenPaused onlyPauser returns (bool itsDeadJim) {\n        require(isPauser(msg.sender), \"onlyPauser\");\n        address payable payableOwner = address(uint160(owner()));\n        selfdestruct(payableOwner);\n        return true;\n    }\n\n}\n",
  "sourcePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/PaypolitanToken.sol",
  "ast": {
    "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/PaypolitanToken.sol",
    "exportedSymbols": {
      "PaypolitanToken": [
        1577
      ]
    },
    "id": 1578,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1446,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/Identity.sol",
        "file": "./Identity.sol",
        "id": 1447,
        "nodeType": "ImportDirective",
        "scope": 1578,
        "sourceUnit": 1224,
        "src": "25:24:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 1448,
        "nodeType": "ImportDirective",
        "scope": 1578,
        "sourceUnit": 2956,
        "src": "50:87:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "file": "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "id": 1449,
        "nodeType": "ImportDirective",
        "scope": 1578,
        "sourceUnit": 3014,
        "src": "138:87:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/UniformTokenGrantor.sol",
        "file": "./UniformTokenGrantor.sol",
        "id": 1450,
        "nodeType": "ImportDirective",
        "scope": 1578,
        "sourceUnit": 1848,
        "src": "226:35:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1451,
              "name": "Identity",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1223,
              "src": "505:8:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Identity_$1223",
                "typeString": "contract Identity"
              }
            },
            "id": 1452,
            "nodeType": "InheritanceSpecifier",
            "src": "505:8:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1453,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2924,
              "src": "519:5:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$2924",
                "typeString": "contract ERC20"
              }
            },
            "id": 1454,
            "nodeType": "InheritanceSpecifier",
            "src": "519:5:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1455,
              "name": "ERC20Pausable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3115,
              "src": "530:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Pausable_$3115",
                "typeString": "contract ERC20Pausable"
              }
            },
            "id": 1456,
            "nodeType": "InheritanceSpecifier",
            "src": "530:13:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1457,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2955,
              "src": "549:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$2955",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 1458,
            "nodeType": "InheritanceSpecifier",
            "src": "549:13:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1459,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3013,
              "src": "568:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$3013",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 1460,
            "nodeType": "InheritanceSpecifier",
            "src": "568:13:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1461,
              "name": "UniformTokenGrantor",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1847,
              "src": "587:19:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_UniformTokenGrantor_$1847",
                "typeString": "contract UniformTokenGrantor"
              }
            },
            "id": 1462,
            "nodeType": "InheritanceSpecifier",
            "src": "587:19:6"
          }
        ],
        "contractDependencies": [
          823,
          1050,
          1178,
          1223,
          1847,
          2013,
          2198,
          2283,
          2527,
          2924,
          2955,
          3013,
          3115,
          3184
        ],
        "contractKind": "contract",
        "documentation": "@dev An ETC20 implementation of the Paypolitan Token. All tokens are initially pre-assigned to\nthe creator, and can later be distributed freely using transfer transferFrom other ERC20 functions",
        "fullyImplemented": false,
        "id": 1577,
        "linearizedBaseContracts": [
          1577,
          1847,
          823,
          1178,
          1050,
          2013,
          2527,
          3013,
          2955,
          3115,
          2283,
          2198,
          2924,
          3184,
          1223
        ],
        "name": "PaypolitanToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 1465,
            "name": "VERSION",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "613:34:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint32",
              "typeString": "uint32"
            },
            "typeName": {
              "id": 1463,
              "name": "uint32",
              "nodeType": "ElementaryTypeName",
              "src": "613:6:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint32",
                "typeString": "uint32"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "31",
              "id": 1464,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "646:1:6",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 1468,
            "name": "DECIMALS",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "653:36:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 1466,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "653:5:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3138",
              "id": 1467,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "687:2:6",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1475,
            "name": "TOKEN_WEI",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "695:58:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1469,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "695:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 1474,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "argumentTypes": null,
                "hexValue": "3130",
                "id": 1470,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "732:2:6",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "argumentTypes": null,
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1472,
                    "name": "DECIMALS",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1468,
                    "src": "744:8:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  }
                ],
                "expression": {
                  "argumentTypes": [
                    {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  ],
                  "id": 1471,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "736:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_uint256_$",
                    "typeString": "type(uint256)"
                  },
                  "typeName": "uint256"
                },
                "id": 1473,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "736:17:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "732:21:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1485,
            "name": "INITIAL_WHOLE_TOKENS",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "760:68:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1476,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "760:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "commonType": {
                    "typeIdentifier": "t_rational_5000000000_by_1",
                    "typeString": "int_const 5000000000"
                  },
                  "id": 1483,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "leftExpression": {
                    "argumentTypes": null,
                    "hexValue": "35",
                    "id": 1478,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "816:1:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_5_by_1",
                      "typeString": "int_const 5"
                    },
                    "value": "5"
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "*",
                  "rightExpression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000000_by_1",
                          "typeString": "int_const 1000000000"
                        },
                        "id": 1481,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "hexValue": "3130",
                          "id": 1479,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "821:2:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "39",
                          "id": 1480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "825:1:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_9_by_1",
                            "typeString": "int_const 9"
                          },
                          "value": "9"
                        },
                        "src": "821:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000_by_1",
                          "typeString": "int_const 1000000000"
                        }
                      }
                    ],
                    "id": 1482,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "820:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1000000000_by_1",
                      "typeString": "int_const 1000000000"
                    }
                  },
                  "src": "816:11:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_5000000000_by_1",
                    "typeString": "int_const 5000000000"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_5000000000_by_1",
                    "typeString": "int_const 5000000000"
                  }
                ],
                "id": 1477,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "808:7:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_uint256_$",
                  "typeString": "type(uint256)"
                },
                "typeName": "uint256"
              },
              "id": 1484,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "808:20:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1494,
            "name": "INITIAL_SUPPLY",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "834:92:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1486,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "834:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 1493,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "argumentTypes": null,
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1488,
                    "name": "INITIAL_WHOLE_TOKENS",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1485,
                    "src": "884:20:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "expression": {
                  "argumentTypes": [
                    {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  ],
                  "id": 1487,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "876:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_uint256_$",
                    "typeString": "type(uint256)"
                  },
                  "typeName": "uint256"
                },
                "id": 1489,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "876:29:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "*",
              "rightExpression": {
                "argumentTypes": null,
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1491,
                    "name": "TOKEN_WEI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1475,
                    "src": "916:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "expression": {
                  "argumentTypes": [
                    {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  ],
                  "id": 1490,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "908:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_uint256_$",
                    "typeString": "type(uint256)"
                  },
                  "typeName": "uint256"
                },
                "id": 1492,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "908:18:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "876:50:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1508,
              "nodeType": "Block",
              "src": "1098:110:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1503,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3199,
                          "src": "1174:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1504,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1174:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1505,
                        "name": "INITIAL_SUPPLY",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1494,
                        "src": "1186:14:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1502,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2810,
                      "src": "1168:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1168:33:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1507,
                  "nodeType": "ExpressionStatement",
                  "src": "1168:33:6"
                }
              ]
            },
            "documentation": "@dev Constructor that gives msg.sender all of existing tokens",
            "id": 1509,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "506179706f6c6974616e2e696f2050504120746f6b656e",
                    "id": 1497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1054:25:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_58a5f4f2d25e7a873053658c8184a344672db49f899211ac881cc4ee7c3db207",
                      "typeString": "literal_string \"Paypolitan.io PPA token\""
                    },
                    "value": "Paypolitan.io PPA token"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "505041",
                    "id": 1498,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1081:5:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_f276ea1b3308342e1ae9e71663570766af01b8560b4f7d23aff11335d5273bef",
                      "typeString": "literal_string \"PPA\""
                    },
                    "value": "PPA"
                  },
                  {
                    "argumentTypes": null,
                    "id": 1499,
                    "name": "DECIMALS",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1468,
                    "src": "1088:8:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  }
                ],
                "id": 1500,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1496,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3013,
                  "src": "1040:13:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$3013_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1040:57:6"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1495,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1030:2:6"
            },
            "returnParameters": {
              "id": 1501,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1098:0:6"
            },
            "scope": 1577,
            "src": "1019:189:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1515,
            "name": "DepositReceived",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1511,
                  "indexed": true,
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 1515,
                  "src": "1236:20:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1510,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1236:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1513,
                  "indexed": false,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 1515,
                  "src": "1258:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1512,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1258:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1235:37:6"
            },
            "src": "1214:59:6"
          },
          {
            "body": {
              "id": 1525,
              "nodeType": "Block",
              "src": "1412:134:6",
              "statements": [
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1519,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3199,
                          "src": "1517:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1520,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1517:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1521,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3199,
                          "src": "1529:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1522,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1529:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1518,
                      "name": "DepositReceived",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1515,
                      "src": "1501:15:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1501:38:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1524,
                  "nodeType": "EmitStatement",
                  "src": "1496:43:6"
                }
              ]
            },
            "documentation": "fallback function: collect any ether sent to us (whether we asked for it or not)",
            "id": 1526,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1516,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1392:2:6"
            },
            "returnParameters": {
              "id": 1517,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1412:0:6"
            },
            "scope": 1577,
            "src": "1384:162:6",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1542,
              "nodeType": "Block",
              "src": "1945:101:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1537,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3199,
                          "src": "2021:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1538,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2021:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1539,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1528,
                        "src": "2033:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1536,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2853,
                      "src": "2015:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1540,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2015:24:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1541,
                  "nodeType": "ExpressionStatement",
                  "src": "2015:24:6"
                }
              ]
            },
            "documentation": "@dev Allow only owner to burn tokens from the owner's wallet, also decreasing the total supply.\nThere is no reason for a token holder to EVER call this method directly. It will be\nused by future Paypolitan contract to implement the PaypolitanToken side of token redemption.",
            "id": 1543,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 1531,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3199,
                      "src": "1926:3:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1926:10:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 1533,
                    "name": "value",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1528,
                    "src": "1938:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1534,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1530,
                  "name": "onlyIfFundsAvailableNow",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 664,
                  "src": "1902:23:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_address_$_t_uint256_$",
                    "typeString": "modifier (address,uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1902:42:6"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1529,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1528,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 1543,
                  "src": "1880:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1527,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1880:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1879:15:6"
            },
            "returnParameters": {
              "id": 1535,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1945:0:6"
            },
            "scope": 1577,
            "src": "1866:180:6",
            "stateMutability": "nonpayable",
            "superFunction": 2941,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1575,
              "nodeType": "Block",
              "src": "2358:183:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1554,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3199,
                              "src": "2385:3:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1555,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "2385:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1553,
                          "name": "isPauser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2144,
                          "src": "2376:8:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 1556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2376:20:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "6f6e6c79506175736572",
                        "id": 1557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2398:12:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c77c3ebcc93d0b90d387d1d40117c5f92e1e9b8ab1369eb7d524aa5c573048a0",
                          "typeString": "literal_string \"onlyPauser\""
                        },
                        "value": "onlyPauser"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c77c3ebcc93d0b90d387d1d40117c5f92e1e9b8ab1369eb7d524aa5c573048a0",
                          "typeString": "literal_string \"onlyPauser\""
                        }
                      ],
                      "id": 1552,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3202,
                        3203
                      ],
                      "referencedDeclaration": 3203,
                      "src": "2368:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2368:43:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1559,
                  "nodeType": "ExpressionStatement",
                  "src": "2368:43:6"
                },
                {
                  "assignments": [
                    1561
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1561,
                      "name": "payableOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 1575,
                      "src": "2421:28:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 1560,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2421:15:6",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1568,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1564,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2450,
                              "src": "2468:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 1565,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2468:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1563,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2460:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint160_$",
                            "typeString": "type(uint160)"
                          },
                          "typeName": "uint160"
                        },
                        "id": 1566,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2460:16:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      ],
                      "id": 1562,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "2452:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": "address"
                    },
                    "id": 1567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2452:25:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2421:56:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1570,
                        "name": "payableOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1561,
                        "src": "2500:12:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 1569,
                      "name": "selfdestruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3207,
                      "src": "2487:12:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable)"
                      }
                    },
                    "id": 1571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2487:26:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1572,
                  "nodeType": "ExpressionStatement",
                  "src": "2487:26:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 1573,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2530:4:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1551,
                  "id": 1574,
                  "nodeType": "Return",
                  "src": "2523:11:6"
                }
              ]
            },
            "documentation": "@dev Allow pauser to kill the contract (which must already be paused), with enough restrictions\nin place to ensure this could not happen by accident very easily.\nETH is returned to owner wallet.",
            "id": 1576,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1546,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1545,
                  "name": "whenPaused",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2248,
                  "src": "2310:10:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2310:10:6"
              },
              {
                "arguments": null,
                "id": 1548,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1547,
                  "name": "onlyPauser",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2131,
                  "src": "2321:10:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2321:10:6"
              }
            ],
            "name": "kill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1544,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2300:2:6"
            },
            "returnParameters": {
              "id": 1551,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1550,
                  "name": "itsDeadJim",
                  "nodeType": "VariableDeclaration",
                  "scope": 1576,
                  "src": "2341:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1549,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2341:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2340:17:6"
            },
            "scope": 1577,
            "src": "2287:254:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1578,
        "src": "473:2071:6"
      }
    ],
    "src": "0:2545:6"
  },
  "legacyAST": {
    "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/PaypolitanToken.sol",
    "exportedSymbols": {
      "PaypolitanToken": [
        1577
      ]
    },
    "id": 1578,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1446,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/Identity.sol",
        "file": "./Identity.sol",
        "id": 1447,
        "nodeType": "ImportDirective",
        "scope": 1578,
        "sourceUnit": 1224,
        "src": "25:24:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "file": "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
        "id": 1448,
        "nodeType": "ImportDirective",
        "scope": 1578,
        "sourceUnit": 2956,
        "src": "50:87:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "file": "../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol",
        "id": 1449,
        "nodeType": "ImportDirective",
        "scope": 1578,
        "sourceUnit": 3014,
        "src": "138:87:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/adrian/work/paypolitan_token/Paypolitan_token/contracts/UniformTokenGrantor.sol",
        "file": "./UniformTokenGrantor.sol",
        "id": 1450,
        "nodeType": "ImportDirective",
        "scope": 1578,
        "sourceUnit": 1848,
        "src": "226:35:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1451,
              "name": "Identity",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1223,
              "src": "505:8:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Identity_$1223",
                "typeString": "contract Identity"
              }
            },
            "id": 1452,
            "nodeType": "InheritanceSpecifier",
            "src": "505:8:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1453,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2924,
              "src": "519:5:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$2924",
                "typeString": "contract ERC20"
              }
            },
            "id": 1454,
            "nodeType": "InheritanceSpecifier",
            "src": "519:5:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1455,
              "name": "ERC20Pausable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3115,
              "src": "530:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Pausable_$3115",
                "typeString": "contract ERC20Pausable"
              }
            },
            "id": 1456,
            "nodeType": "InheritanceSpecifier",
            "src": "530:13:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1457,
              "name": "ERC20Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2955,
              "src": "549:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Burnable_$2955",
                "typeString": "contract ERC20Burnable"
              }
            },
            "id": 1458,
            "nodeType": "InheritanceSpecifier",
            "src": "549:13:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1459,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3013,
              "src": "568:13:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$3013",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 1460,
            "nodeType": "InheritanceSpecifier",
            "src": "568:13:6"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1461,
              "name": "UniformTokenGrantor",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1847,
              "src": "587:19:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_UniformTokenGrantor_$1847",
                "typeString": "contract UniformTokenGrantor"
              }
            },
            "id": 1462,
            "nodeType": "InheritanceSpecifier",
            "src": "587:19:6"
          }
        ],
        "contractDependencies": [
          823,
          1050,
          1178,
          1223,
          1847,
          2013,
          2198,
          2283,
          2527,
          2924,
          2955,
          3013,
          3115,
          3184
        ],
        "contractKind": "contract",
        "documentation": "@dev An ETC20 implementation of the Paypolitan Token. All tokens are initially pre-assigned to\nthe creator, and can later be distributed freely using transfer transferFrom other ERC20 functions",
        "fullyImplemented": false,
        "id": 1577,
        "linearizedBaseContracts": [
          1577,
          1847,
          823,
          1178,
          1050,
          2013,
          2527,
          3013,
          2955,
          3115,
          2283,
          2198,
          2924,
          3184,
          1223
        ],
        "name": "PaypolitanToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 1465,
            "name": "VERSION",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "613:34:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint32",
              "typeString": "uint32"
            },
            "typeName": {
              "id": 1463,
              "name": "uint32",
              "nodeType": "ElementaryTypeName",
              "src": "613:6:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint32",
                "typeString": "uint32"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "31",
              "id": 1464,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "646:1:6",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 1468,
            "name": "DECIMALS",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "653:36:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 1466,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "653:5:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3138",
              "id": 1467,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "687:2:6",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1475,
            "name": "TOKEN_WEI",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "695:58:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1469,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "695:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 1474,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "argumentTypes": null,
                "hexValue": "3130",
                "id": 1470,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "732:2:6",
                "subdenomination": null,
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "argumentTypes": null,
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1472,
                    "name": "DECIMALS",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1468,
                    "src": "744:8:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  }
                ],
                "expression": {
                  "argumentTypes": [
                    {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  ],
                  "id": 1471,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "736:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_uint256_$",
                    "typeString": "type(uint256)"
                  },
                  "typeName": "uint256"
                },
                "id": 1473,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "736:17:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "732:21:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1485,
            "name": "INITIAL_WHOLE_TOKENS",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "760:68:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1476,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "760:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "commonType": {
                    "typeIdentifier": "t_rational_5000000000_by_1",
                    "typeString": "int_const 5000000000"
                  },
                  "id": 1483,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "leftExpression": {
                    "argumentTypes": null,
                    "hexValue": "35",
                    "id": 1478,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "816:1:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_5_by_1",
                      "typeString": "int_const 5"
                    },
                    "value": "5"
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "*",
                  "rightExpression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000000_by_1",
                          "typeString": "int_const 1000000000"
                        },
                        "id": 1481,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "hexValue": "3130",
                          "id": 1479,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "821:2:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "39",
                          "id": 1480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "825:1:6",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_9_by_1",
                            "typeString": "int_const 9"
                          },
                          "value": "9"
                        },
                        "src": "821:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000_by_1",
                          "typeString": "int_const 1000000000"
                        }
                      }
                    ],
                    "id": 1482,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "820:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1000000000_by_1",
                      "typeString": "int_const 1000000000"
                    }
                  },
                  "src": "816:11:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_5000000000_by_1",
                    "typeString": "int_const 5000000000"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_5000000000_by_1",
                    "typeString": "int_const 5000000000"
                  }
                ],
                "id": 1477,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "808:7:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_uint256_$",
                  "typeString": "type(uint256)"
                },
                "typeName": "uint256"
              },
              "id": 1484,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "808:20:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 1494,
            "name": "INITIAL_SUPPLY",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "834:92:6",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1486,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "834:7:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 1493,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "argumentTypes": null,
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1488,
                    "name": "INITIAL_WHOLE_TOKENS",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1485,
                    "src": "884:20:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "expression": {
                  "argumentTypes": [
                    {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  ],
                  "id": 1487,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "876:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_uint256_$",
                    "typeString": "type(uint256)"
                  },
                  "typeName": "uint256"
                },
                "id": 1489,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "876:29:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "*",
              "rightExpression": {
                "argumentTypes": null,
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1491,
                    "name": "TOKEN_WEI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1475,
                    "src": "916:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "expression": {
                  "argumentTypes": [
                    {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  ],
                  "id": 1490,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "908:7:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_uint256_$",
                    "typeString": "type(uint256)"
                  },
                  "typeName": "uint256"
                },
                "id": 1492,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "908:18:6",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "876:50:6",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1508,
              "nodeType": "Block",
              "src": "1098:110:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1503,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3199,
                          "src": "1174:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1504,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1174:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1505,
                        "name": "INITIAL_SUPPLY",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1494,
                        "src": "1186:14:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1502,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2810,
                      "src": "1168:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1168:33:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1507,
                  "nodeType": "ExpressionStatement",
                  "src": "1168:33:6"
                }
              ]
            },
            "documentation": "@dev Constructor that gives msg.sender all of existing tokens",
            "id": 1509,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "506179706f6c6974616e2e696f2050504120746f6b656e",
                    "id": 1497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1054:25:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_58a5f4f2d25e7a873053658c8184a344672db49f899211ac881cc4ee7c3db207",
                      "typeString": "literal_string \"Paypolitan.io PPA token\""
                    },
                    "value": "Paypolitan.io PPA token"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "505041",
                    "id": 1498,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1081:5:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_f276ea1b3308342e1ae9e71663570766af01b8560b4f7d23aff11335d5273bef",
                      "typeString": "literal_string \"PPA\""
                    },
                    "value": "PPA"
                  },
                  {
                    "argumentTypes": null,
                    "id": 1499,
                    "name": "DECIMALS",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1468,
                    "src": "1088:8:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  }
                ],
                "id": 1500,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1496,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3013,
                  "src": "1040:13:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$3013_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1040:57:6"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1495,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1030:2:6"
            },
            "returnParameters": {
              "id": 1501,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1098:0:6"
            },
            "scope": 1577,
            "src": "1019:189:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 1515,
            "name": "DepositReceived",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1514,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1511,
                  "indexed": true,
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 1515,
                  "src": "1236:20:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1510,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1236:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1513,
                  "indexed": false,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 1515,
                  "src": "1258:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1512,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1258:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1235:37:6"
            },
            "src": "1214:59:6"
          },
          {
            "body": {
              "id": 1525,
              "nodeType": "Block",
              "src": "1412:134:6",
              "statements": [
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1519,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3199,
                          "src": "1517:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1520,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1517:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1521,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3199,
                          "src": "1529:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1522,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "value",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1529:9:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1518,
                      "name": "DepositReceived",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1515,
                      "src": "1501:15:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1501:38:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1524,
                  "nodeType": "EmitStatement",
                  "src": "1496:43:6"
                }
              ]
            },
            "documentation": "fallback function: collect any ether sent to us (whether we asked for it or not)",
            "id": 1526,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1516,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1392:2:6"
            },
            "returnParameters": {
              "id": 1517,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1412:0:6"
            },
            "scope": 1577,
            "src": "1384:162:6",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1542,
              "nodeType": "Block",
              "src": "1945:101:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1537,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3199,
                          "src": "2021:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1538,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "2021:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1539,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1528,
                        "src": "2033:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1536,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2853,
                      "src": "2015:5:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1540,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2015:24:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1541,
                  "nodeType": "ExpressionStatement",
                  "src": "2015:24:6"
                }
              ]
            },
            "documentation": "@dev Allow only owner to burn tokens from the owner's wallet, also decreasing the total supply.\nThere is no reason for a token holder to EVER call this method directly. It will be\nused by future Paypolitan contract to implement the PaypolitanToken side of token redemption.",
            "id": 1543,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 1531,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3199,
                      "src": "1926:3:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1926:10:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 1533,
                    "name": "value",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1528,
                    "src": "1938:5:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1534,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1530,
                  "name": "onlyIfFundsAvailableNow",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 664,
                  "src": "1902:23:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_address_$_t_uint256_$",
                    "typeString": "modifier (address,uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1902:42:6"
              }
            ],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1529,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1528,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 1543,
                  "src": "1880:13:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1527,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1880:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1879:15:6"
            },
            "returnParameters": {
              "id": 1535,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1945:0:6"
            },
            "scope": 1577,
            "src": "1866:180:6",
            "stateMutability": "nonpayable",
            "superFunction": 2941,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1575,
              "nodeType": "Block",
              "src": "2358:183:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1554,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3199,
                              "src": "2385:3:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1555,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "2385:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1553,
                          "name": "isPauser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2144,
                          "src": "2376:8:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                            "typeString": "function (address) view returns (bool)"
                          }
                        },
                        "id": 1556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2376:20:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "6f6e6c79506175736572",
                        "id": 1557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2398:12:6",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c77c3ebcc93d0b90d387d1d40117c5f92e1e9b8ab1369eb7d524aa5c573048a0",
                          "typeString": "literal_string \"onlyPauser\""
                        },
                        "value": "onlyPauser"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c77c3ebcc93d0b90d387d1d40117c5f92e1e9b8ab1369eb7d524aa5c573048a0",
                          "typeString": "literal_string \"onlyPauser\""
                        }
                      ],
                      "id": 1552,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        3202,
                        3203
                      ],
                      "referencedDeclaration": 3203,
                      "src": "2368:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2368:43:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1559,
                  "nodeType": "ExpressionStatement",
                  "src": "2368:43:6"
                },
                {
                  "assignments": [
                    1561
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1561,
                      "name": "payableOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 1575,
                      "src": "2421:28:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 1560,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2421:15:6",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1568,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1564,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2450,
                              "src": "2468:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 1565,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2468:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1563,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2460:7:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint160_$",
                            "typeString": "type(uint160)"
                          },
                          "typeName": "uint160"
                        },
                        "id": 1566,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2460:16:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint160",
                          "typeString": "uint160"
                        }
                      ],
                      "id": 1562,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "2452:7:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": "address"
                    },
                    "id": 1567,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2452:25:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2421:56:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1570,
                        "name": "payableOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1561,
                        "src": "2500:12:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 1569,
                      "name": "selfdestruct",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3207,
                      "src": "2487:12:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_selfdestruct_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable)"
                      }
                    },
                    "id": 1571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2487:26:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1572,
                  "nodeType": "ExpressionStatement",
                  "src": "2487:26:6"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 1573,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2530:4:6",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 1551,
                  "id": 1574,
                  "nodeType": "Return",
                  "src": "2523:11:6"
                }
              ]
            },
            "documentation": "@dev Allow pauser to kill the contract (which must already be paused), with enough restrictions\nin place to ensure this could not happen by accident very easily.\nETH is returned to owner wallet.",
            "id": 1576,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 1546,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1545,
                  "name": "whenPaused",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2248,
                  "src": "2310:10:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2310:10:6"
              },
              {
                "arguments": null,
                "id": 1548,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1547,
                  "name": "onlyPauser",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2131,
                  "src": "2321:10:6",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2321:10:6"
              }
            ],
            "name": "kill",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1544,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2300:2:6"
            },
            "returnParameters": {
              "id": 1551,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1550,
                  "name": "itsDeadJim",
                  "nodeType": "VariableDeclaration",
                  "scope": 1576,
                  "src": "2341:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1549,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2341:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2340:17:6"
            },
            "scope": 1577,
            "src": "2287:254:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1578,
        "src": "473:2071:6"
      }
    ],
    "src": "0:2545:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.13",
  "updatedAt": "2019-08-30T15:13:15.490Z",
  "devdoc": {
    "details": "An ETC20 implementation of the Paypolitan Token. All tokens are initially pre-assigned to the creator, and can later be distributed freely using transfer transferFrom other ERC20 functions",
    "methods": {
      "allowance(address,address)": {
        "details": "See `IERC20.allowance`."
      },
      "approve(address,uint256)": {
        "details": "additional available funds check to prevent spending but not-vested tokens"
      },
      "balanceOf(address)": {
        "details": "See `IERC20.balanceOf`."
      },
      "burn(uint256)": {
        "details": "Allow only owner to burn tokens from the owner's wallet, also decreasing the total supply. There is no reason for a token holder to EVER call this method directly. It will be used by future Paypolitan contract to implement the PaypolitanToken side of token redemption."
      },
      "burnFrom(address,uint256)": {
        "details": "See `ERC20._burnFrom`."
      },
      "constructor": {
        "details": "Constructor that gives msg.sender all of existing tokens"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`).     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.     * > Note that this information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including `IERC20.balanceOf` and `IERC20.transfer`."
      },
      "getIntrinsicVestingSchedule(address)": {
        "details": "returns all the information about the vesting schedule directly associated with the given account. This can be used to double check that a uniform grantor has been set up with a correct vesting schedule. Also, recipients of standard (non-uniform) grants can use this. This method is only callable by the account holder or a grantor, so this is mainly intended for administrative use. Holders of uniform grants must use vestingAsOf() to view their vesting schedule, as it is stored in the grantor account",
        "params": {
          "grantHolder": "= The address to do this for. the special value 0 to indicate today"
        },
        "return": "= Atuple with the following values: vestDuration = grant duration in days cliffDuration = duration of the cliff vestIntervalDays = number of days between vesting periods"
      },
      "grantUniformVestingTokens(address,uint256,uint256,uint32)": {
        "details": "Immediately grants tokens to an address, including a portion that will vest over time according to the uniform vesting schedule already established ni the grantor's account",
        "params": {
          "beneficiary": "= Address to which tokens will be granted",
          "startDay": "= start day of the grant's vesting schedule, in days since the UNIX epoch (start of day). The startDay may be given as a date in the future or in the past, going as far back as year 2000",
          "totalAmount": "= total number of tokens to deposit into the account",
          "vestingAmount": "= out of totalAmount, the number of tokens subject to vesting"
        }
      },
      "grantVestingTokens(address,uint256,uint256,uint32,uint32,uint32,uint32,bool)": {
        "details": "Immediately grants tokens to an address, including a portion that will vest over time according to a set vesting schedule. The overall duration and cliff duration of the grant must be an even multiple of the vesting interval.",
        "params": {
          "beneficiary": "= Address to which tokens will be granted.",
          "cliffDuration": "= Duration of the cliff, with respect to the grant start day, in days.",
          "duration": "= Duration of the vesting schedule, with respect to the grant start day, in days.",
          "interval": "= Number of days between vesting increases.",
          "isRevocable": "= True if the grant can be revoked (i.e. was a gift) or false if it cannot  be revoked (i.e. tokens were purchased).",
          "startDay": "= Start day of the grant's vesting schedule, in days since the UNIX epoch  (start of day). The startDay may be given as a date in the future or in the past, going as far  back as year 2000.",
          "totalAmount": "= Total number of tokens to deposit into the account.",
          "vestingAmount": "= Out of totalAmount, the number of tokens subject to vesting."
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "kill()": {
        "details": "Allow pauser to kill the contract (which must already be paused), with enough restrictions in place to ensure this could not happen by accident very easily. ETH is returned to owner wallet."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Called by a pauser to pause, triggers stopped state."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "revokeGrant(address,uint32)": {
        "details": "if an account has a revocable grant, this forces the grant to end based on computing the amount vested up to the given date. All tokens that would no longer vest are returned to the account of the original grantor",
        "params": {
          "grantHolder": "- address to which tokens will be granted",
          "onDay": "- the day upon which the vesting schedule will be effectively terminated"
        }
      },
      "safeGrantUniformVestingTokens(address,uint256,uint256,uint32)": {
        "details": "This variant only grants tokens if the beneficiary account has previously self-registered"
      },
      "safeGrantVestingTokens(address,uint256,uint256,uint32,uint32,uint32,uint32,bool)": {
        "details": "this variant only grants tokens if the beneficiary account has previously self-registered"
      },
      "setGrantorVestingSchedule(address,uint32,uint32,uint32,bool)": {
        "details": "Lets owner permanently establish a vesting schedule for a restricted grantor to use when creating uniform token grants. Grantee accounts forever refer to the grantor's account to look up vesting, so this method can only be used once per grantor.",
        "params": {
          "cliffDuration": "= Duration of the cliff, with respect to the grant start day, in days.",
          "duration": "= Duration of the vesting schedule, with respect to the grant start day, in days.",
          "grantor": "= Address which will receive the uniform grantable vesting schedule.",
          "interval": "= Number of days between vesting increases.",
          "isRevocable": "= True if the grant can be revoked (i.e. was a gift) or false if it cannot  be revoked (i.e. tokens were purchased)."
        }
      },
      "setRestrictions(address,uint32,uint32,uint32)": {
        "details": "lets the ownser set or change specific restrictions. Restrictions must be established before the grantor will be allowed to issue grants. All the values are expressed as number of days since UNIX epoch. Nothe that the inputs are themselevs not very thoroughly restricted. However, this method can be called more than once if incorrect values need to be changed, or to extend a grantor's expiration date",
        "params": {
          "expirationDay": "- the last day this grantor may make grants",
          "grantor": "- Address which will receive the uniform grantable vesting schedule",
          "maxStartDay": "- the maximum value for startDay allowed in grant creation",
          "minStartDay": "- the smallest value for startDay allowed in grant creation"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "today()": {
        "details": "returns the day number of the current day, in days since the UNIX epoch"
      },
      "totalSupply()": {
        "details": "See `IERC20.totalSupply`."
      },
      "transfer(address,uint256)": {
        "details": "methods transfer() and approve() require an additional available funds check to prevent spending held but not-vested tokens. Note that transferFrom() does not have this additional check because approved funds come from an already set-aside allowance, not from the wallet."
      },
      "unpause()": {
        "details": "Called by a pauser to unpause, returns to normal state."
      },
      "vestingAsOf(uint32)": {
        "details": "return all the information about the grant's vesting as of the given day for the current account to be called by the account holder",
        "params": {
          "onDayOrToday": "- the day to check for. Can pass the special value 0 to indicate today"
        },
        "return": "- A touple with the following values amountVested - the amount of the vestingAmount that is vested amountNotVested - the amount that is vested (equal to vestingAmount - vestedAmount) amountOfGrant - the amount of tokens subject to vesting vestStartDay - starting day of the grant cliffDuration - duration of the cliff vestDuration - grant duration in days vestIntervalDays - number of days between vesting periods isActive - true if the vesting schedule is currently active wasRevoked - true id the vesting schedule was revoked"
      }
    }
  },
  "userdoc": {
    "methods": {
      "iAm(string)": {
        "notice": "Associate short name with the account"
      },
      "registerAccount()": {
        "notice": "this registers the calling wallet address as a known address. Operations that transfer responsibility may require the target account to be a registered account to protect the system from getting into a state where administration or a large amount of funds can become forever innaccesible"
      },
      "renounceOwnership()": {
        "notice": "overridden ERC20 functionality ensure there is no way for the contract to end up with no owner"
      },
      "safeTransfer(address,uint256)": {
        "notice": "Safe ERC20 methods"
      },
      "transferOwnership(address)": {
        "notice": "allows the current owner to transfer control of the contract to a newOwner"
      },
      "whereAmI()": {
        "notice": "Function to confirm the address of the current account"
      },
      "whoAmI()": {
        "notice": "Confirm the shortName of the current account"
      }
    }
  }
}